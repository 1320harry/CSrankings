name: Commit Validation

on:
  pull_request_target:
    types: [opened, synchronize]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  commit_validation:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Generate diff.json from PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT_NUMBER: ${{ github.event.number }}
        run: |
          python3 generate_diff.py

      - name: Run CSV + OpenAI validation
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python3 validate_commit.py diff.json | tee > pr_comment.txt || true

      - name: Upload PR number
        run: |
          mkdir -p pr
          echo "${{ github.event.number }}" > pr/pr_number.txt

      - uses: actions/upload-artifact@v4
        with:
          name: pr_comment.txt
          path: pr_comment.txt
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        with:
          name: remove_stale.txt
          path: remove_stale.txt
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        with:
          name: pr_number.txt
          path: pr/pr_number.txt

  post_comment:
    runs-on: ubuntu-latest
    needs: commit_validation
    if: always()

    permissions:
      pull-requests: write
      issues: write
      contents: write

    steps:
      - name: Download PR number
        uses: actions/download-artifact@v4
        with:
          name: pr_number.txt
          path: pr

      - name: Download comment and stale flag
        uses: actions/download-artifact@v4
        with:
          name: pr_comment.txt
          path: .

      - uses: actions/download-artifact@v4
        with:
          name: remove_stale.txt
          path: .

      - name: Post audit comment and manage labels / merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(cat pr/pr_number.txt)
          COMMENTS_URL="https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"
          LABELS_URL="https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels"

          # Post PR comment if not already posted
          if [ -f pr_comment.txt ]; then
            COMMENT_JSON=$(jq -Rs . < pr_comment.txt)
            EXISTING=$(curl -s -H "Authorization: token $GH_TOKEN" "$COMMENTS_URL")
            EXISTS=$(echo "$EXISTING" | jq -r '.[].body' | grep -Fxf pr_comment.txt || true)

            if [ -z "$EXISTS" ]; then
              echo "Posting validation result comment..."
              curl -s -X POST \
                -H "Authorization: token $GH_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "$COMMENTS_URL" \
                -d "{\"body\": $COMMENT_JSON}"
            else
              echo "Comment already posted. Skipping."
            fi
          fi

          # CASE 1: Checks FAILED → add 'stale'
          if grep -q "false" remove_stale.txt; then
            echo "Validation failed. Adding 'stale' label and reminder."
            curl -s -X POST \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "$COMMENTS_URL" \
              -d '{"body": "Please address the failed validity checks above."}'

            curl -s -X POST \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "$LABELS_URL" \
              -d '{"labels": ["stale"]}'
            exit 0
          fi

          # CASE 2: Checks PASSED → remove 'stale', add 'validated', merge PR
          echo "Validation passed. Managing labels and attempting merge."

          # Remove stale label (if present)
          EXISTING_LABELS=$(curl -s -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels)

          if echo "$EXISTING_LABELS" | jq -r '.[].name' | grep -q "^stale$"; then
            echo "Removing 'stale' label."
            curl -s -X DELETE \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels/stale
          fi

          # Add validated label
          echo "Adding 'validated' label."
          curl -s -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "$LABELS_URL" \
            -d '{"labels": ["validated"]}'

          # Try to merge the PR
          PR_API_URL="https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER"
          MERGE_URL="https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge"

          MERGEABLE=$(curl -s -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "$PR_API_URL" | jq -r '.mergeable')

          if [ "$MERGEABLE" = "true" ]; then
            echo "Merging PR #$PR_NUMBER."
            curl -s -X PUT \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "$MERGE_URL" \
              -d '{"merge_method": "squash"}'
          else
            echo "PR #$PR_NUMBER is not mergeable."
            curl -s -X POST \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "$COMMENTS_URL" \
              -d '{"body": "✅ All validity checks passed. This PR is ready to merge, but could not be merged automatically (e.g., due to conflicts). Please merge manually."}'
          fi

  stale:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/stale@v9
        with:
          stale-pr-label: 'stale'
          stale-pr-message: 'This PR is stale because it has been open for 90 days with no activity. It will be closed in 2 days if there is no further activity.'
          close-pr-message: 'This PR is being closed due to inactivity.'
          days-before-pr-stale: 90
          days-before-pr-close: 2
          days-before-issue-stale: -1
          days-before-issue-close: -1
