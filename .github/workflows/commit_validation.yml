name: Commit Validation

on:
  pull_request_target:
    types: [opened, synchronize]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  commit_validation:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Generate diff.json from PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python3 generate_diff.py

      - name: Run CSV + OpenAI validation
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python3 validate_commit.py diff.json | tee pr_comment.txt || true

      - name: Save PR number
        run: |
          mkdir -p pr
          echo "${{ github.event.number }}" > pr/pr_number.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            pr/pr_number.txt
            pr_comment.txt
            remove_stale.txt
          if-no-files-found: ignore

  post_comment:
    runs-on: ubuntu-latest
    needs: commit_validation
    if: always()

    permissions:
      pull-requests: write
      issues: write
      contents: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: artifacts

      - name: Post audit comment and manage labels / merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(<artifacts/pr/pr_number.txt)
          REPO="${{ github.repository }}"
          COMMENTS_URL="https://api.github.com/repos/$REPO/issues/$PR_NUMBER/comments"
          LABELS_URL="https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels"

          if [ -f artifacts/pr_comment.txt ]; then
            COMMENT_JSON=$(jq -Rs . < artifacts/pr_comment.txt)
            EXISTING=$(curl -s -H "Authorization: token $GH_TOKEN" "$COMMENTS_URL")
            EXISTS=$(echo "$EXISTING" | jq -r '.[].body' | grep -Fxf artifacts/pr_comment.txt || true)

            if [ -z "$EXISTS" ]; then
              echo "Posting validation result comment..."
              TMPFILE=$(mktemp)
              echo "{\"body\": $COMMENT_JSON}" > "$TMPFILE"

              curl -s -X POST \
                -H "Authorization: token $GH_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "$COMMENTS_URL" \
                --data-binary "@$TMPFILE"
              rm -f "$TMPFILE"
            else
              echo "Comment already exists."
            fi
          fi

          # CASE 1: Checks FAILED → add 'stale'
          if [ -f artifacts/remove_stale.txt ] && grep -q "false" artifacts/remove_stale.txt; then
            echo "Validation failed. Adding 'stale' label."
            curl -s -X POST \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "$COMMENTS_URL" \
              -d '{"body": "Please address the failed validity checks above."}'

            curl -s -X POST \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "$LABELS_URL" \
              -d '{"labels": ["stale"]}'
            exit 0
          fi

          # CASE 2: Checks PASSED → remove 'stale', add 'validated'
          echo "Validation passed. Managing labels."

          EXISTING_LABELS=$(curl -s -H "Authorization: token $GH_TOKEN" "$LABELS_URL")
          if echo "$EXISTING_LABELS" | jq -r '.[].name' | grep -q "^stale$"; then
            echo "Removing 'stale' label."
            curl -s -X DELETE \
              -H "Authorization: token $GH_TOKEN" \
              "$LABELS_URL/stale"
          fi

          echo "Adding 'validated' label."
          curl -s -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "$LABELS_URL" \
            -d '{"labels": ["validated"]}'

  stale:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/stale@v9
        with:
          stale-pr-label: 'stale'
          stale-pr-message: 'This PR is stale because it has been open for 90 days with no activity. It will be closed in 2 days if there is no further activity.'
          close-pr-message: 'This PR is being closed due to inactivity.'
          days-before-pr-stale: 90
          days-before-pr-close: 2
          days-before-issue-stale: -1
          days-before-issue-close: -1
